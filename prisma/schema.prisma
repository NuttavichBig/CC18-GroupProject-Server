generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int       @id @default(autoincrement())
  email              String    @unique
  googleId           String?   @map("google_id")
  password           String?   @map("password")
  firstName          String    @map("first_name")
  lastName           String?   @map("last_name")
  phone              String?
  gender             String?
  birthdate          DateTime?
  role               UserRole  @default(USER)
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  resetPasswordToken String?   @map("reset_password_token")
  status             Status    @default(ACTIVE)
  image              String?

  partner    Partner?
  reviews    Review[]
  bookings   Booking[]
  promotions UserHavePromotion[]
  Chatbox    Chatbox?
}

model Partner {
  id          Int      @id @default(autoincrement())
  companyName String   @unique @map("company_name")
  address     String
  userId      Int      @unique @map("user_id")
  taxNo       String   @map("tax_no")
  bankName    String   @map("bank_name")
  bankAccount String   @map("bank_account")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  status      Status   @default(PENDING)

  user   User    @relation(fields: [userId], references: [id])
  hotels Hotel[]
}

model Hotel {
  id           Int      @id @default(autoincrement()) @map("id")
  name         String
  detail       String   @map("detail") @db.Text
  address      String
  img          String
  checkinTime  String   @map("checkin_time")
  checkoutTime String   @map("checkout_time")
  lat          Float
  lng          Float
  star         Int?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  phone        String
  webPage      String?  @map("web_page")
  isActive     Boolean  @default(false) @map("is_active")
  partnerId    Int      @map("partner_id")

  rooms             Room[]
  reviews           Review[]
  partner           Partner         @relation(fields: [partnerId], references: [id])
  facilitiesHotel   FacilitiesHotel @relation(fields: [facilitiesHotelId], references: [id])
  facilitiesHotelId Int             @unique
  bookings          Booking[]
}

model Room {
  id              Int        @id @default(autoincrement())
  name            String
  detail          String     @db.Text
  status          RoomStatus @default(AVAILABLE)
  type            RoomType
  price           Decimal    @db.Decimal(10, 2)
  recommendPeople Int        @map("recommend_people")
  size            Float?
  hotelId         Int        @map("hotel_id")
  facilityRoomId  Int        @unique @map("facility_room_id")
  roomAmount      Int        @map("room_amount")

  hotel Hotel @relation(fields: [hotelId], references: [id])

  images   RoomImg[]
  bookings BookingRoom[]

  facilitiesRoom FacilitiesRoom @relation(fields: [facilityRoomId], references: [id])
}

model RoomImg {
  id     Int    @id @default(autoincrement())
  img    String
  roomId Int    @map("room_id")

  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model FacilitiesHotel {
  id             Int     @id @default(autoincrement())
  isRoomService  Boolean @default(false) @map("is_roomservice")
  isReception    Boolean @default(false) @map("is_reception")
  isFitness      Boolean @default(false) @map("is_fitness")
  isParking      Boolean @default(false) @map("is_parking")
  isEVCharging   Boolean @default(false) @map("is_evcharging")
  isSwimmingPool Boolean @default(false) @map("is_swimmingpool")
  isRestaurant   Boolean @default(false) @map("is_restaurant")
  isBreakfast    Boolean @default(false) @map("is_breakfast")
  isChildren     Boolean @default(false) @map("is_children")
  isPetFriendly  Boolean @default(false) @map("is_petfriendly")
  isElevator     Boolean @default(false) @map("is_elevator")

  hotel Hotel?
}

model FacilitiesRoom {
  id                Int     @id @default(autoincrement())
  isSmoking         Boolean @default(false) @map("is_smoking")
  isAirCondition    Boolean @default(false) @map("is_aircondition")
  isPrivateBathroom Boolean @default(false) @map("is_privatebathroom")
  isBalcony         Boolean @default(false) @map("is_balcony")
  isView            Boolean @default(false) @map("is_view")
  isTelevision      Boolean @default(false) @map("is_television")
  isRefrigerator    Boolean @default(false) @map("is_refrigerator")
  isShower          Boolean @default(false) @map("is_shower")
  isBathtub         Boolean @default(false) @map("is_bathtub")
  isWifi            Boolean @default(false) @map("is_wifi")
  room              Room?
}

model Promotion {
  id              Int      @id @default(autoincrement())
  name            String
  img             String?
  code            String?
  description     String   @map("description") @db.Text
  discountPercent Int      @default(0) @map("discount_percent")
  discountValue   Decimal  @default(0) @map("discount_value") @db.Decimal(10, 2)
  minimumSpend    Decimal  @default(0) @map("minimum_spend") @db.Decimal(10, 2)
  maxDiscount     Decimal  @map("max_discount") @db.Decimal(10, 2)
  usageLimit      Int      @map("usage_limit")
  userLimit       Int      @default(1) @map("user_limit")
  isActive        Boolean  @default(false) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  startDate       DateTime @map("start_date")
  endDate         DateTime @map("end_date")

  userHavePromotion UserHavePromotion[]
}

model UserHavePromotion {
  id          Int     @id @default(autoincrement())
  promotionId Int     @map("promotion_id")
  userId      Int     @map("user_id")
  isUsed      Boolean @default(false) @map("is_used")

  promotion Promotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)
  users     User      @relation(fields: [userId], references: [id])
  booking   Booking[]
}

model Booking {
  id                  Int           @id @default(autoincrement())
  UUID                String        @unique @map("uuid")
  status              BookingStatus @default(PENDING)
  totalPrice          Decimal       @map("total_price") @db.Decimal(10, 2)
  checkinDate         DateTime      @map("checkin_date")
  checkoutDate        DateTime      @map("checkout_date")
  createdAt           DateTime      @default(now()) @map("created_at")
  updatedAt           DateTime      @updatedAt @map("updated_at")
  userId              Int?          @map("user_id")
  hotelId             Int           @map("hotel_id")
  userHavePromotionId Int?          @map("user_have_promotion_id")
  firstName           String        @map("first_name")
  lastName            String        @map("last_name")
  phone               String
  email               String

  users              User?              @relation(fields: [userId], references: [id])
  hotels             Hotel              @relation(fields: [hotelId], references: [id])
  userHavePromotions UserHavePromotion? @relation(fields: [userHavePromotionId], references: [id])
  bookingRooms       BookingRoom[]
  payments           Payment?
  review             Review?
}

model BookingRoom {
  id         Int  @id @default(autoincrement())
  bookingId  Int  @map("booking_id")
  roomId     Int? @map("room_id")
  amountRoom Int  @map("amount_room")

  booking Booking @relation(fields: [bookingId], references: [id])
  rooms   Room?   @relation(fields: [roomId], references: [id], onDelete: SetNull)
}

model Review {
  id        Int      @id @default(autoincrement())
  content   String?  @db.Text
  userId    Int      @map("user_id")
  bookingId Int      @unique @map("booking_id")
  hotelId   Int      @map("hotel_id")
  rating    Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  img       String?

  user    User    @relation(fields: [userId], references: [id])
  booking Booking @relation(fields: [bookingId], references: [id])
  hotel   Hotel   @relation(fields: [hotelId], references: [id])
}

model Payment {
  id            Int           @id @default(autoincrement())
  paymentMethod PaymentMethod @map("payment_method")
  stripeId      String?       @map("stripe_id")
  bookingId     Int           @unique @map("booking_id")
  createdAt     DateTime      @default(now()) @map("created_at")

  booking Booking @relation(fields: [bookingId], references: [id])
}

enum Status {
  PENDING
  ACTIVE
  INACTIVE
  BANNED
}

enum UserRole {
  USER
  PARTNER
  ADMIN
}

enum RoomStatus {
  AVAILABLE
  UNAVAILABLE
}

enum RoomType {
  SINGLE
  DOUBLE
  MASTER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELED
  FAILED
  REFUND
}

enum PaymentMethod {
  CREDITCARD
  SCAN
}

enum GENDER {
  MALE
  FEMALE
  OTHER
}

model Chatbox {
  id       Int       @id @default(autoincrement())
  socketId String    @unique
  userId   Int?      @unique
  user     User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]
}

model Message {
  id        Int      @id @default(autoincrement())
  message   String
  isAdmin   Boolean  @default(false)
  isRead    Boolean @default(false)
  createdAt DateTime @default(now())
  chatboxId Int      @map("chatbox_id")
  chatbox   Chatbox  @relation(fields: [chatboxId], references: [id], onDelete: Cascade)
}
